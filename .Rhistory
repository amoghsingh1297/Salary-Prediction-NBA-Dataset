SPG = STL/G)
stats_salary <- merge(stats17, salary.table, by.x = "Player", by.y = "Player")
names(stats_salary)[40] <- "salary17_18"
stats_salary <- stats_salary[-39]
corrplot(cor(stats_salary %>%
select(salary17_18, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "circle",type = "upper")
stats_salary_cor <-
stats_salary %>%
select(salary17_18, PPG, MPG, TOPG, RPG, PER, SPG, APG)
ggpairs(stats_salary_cor)
cor(stats_salary_cor)[,"salary17_18"]
names(stats_salary)[5] <- "Team"
plot_ly(data = stats_salary, x = ~salary17_18, y = ~PPG, color = ~Team,
hoverinfo = "text",
text = ~paste("Player: ", Player,
"<br>Salary: ", format(salary17_18, big.mark = ","),"$",
"<br>PPG: ", round(PPG, digits = 3),
"<br>Team: ", Team)) %>%
layout(
title = "Salary vs Point Per Game",
xaxis = list(title = "Salary USD"),
yaxis = list(title = "Point per Game")
)
stats_salary %>%
ggplot(aes(x = salary17_18, y = PPG)) +
geom_point() +
geom_smooth(method = "lm")
stats_salary_regression <-
stats_salary %>% select(salary17_18, MPG:SPG)
lm(salary17_18~., data=stats_salary_regression)
avg.minutes <- mean(stats_salary_regression$MPG)
avg.turnover <- mean(stats_salary_regression$TOPG)
stats_salary_regression$Trusted <- as.factor(ifelse(stats_salary_regression$MPG >= avg.minutes, "Yes", "No"))
stats_salary_regression$Agressiveness <- as.factor(ifelse(stats_salary_regression$TOPG >= avg.turnover, "Yes", "No"))
head(stats_salary_regression)
stats_salary_regression %>%
ggplot(aes(x = salary17_18, y = PPG, colour = Agressiveness)) +
geom_point() +
geom_smooth(method="lm")
lm(formula = salary17_18 ~ Trusted * Agressiveness, data=stats_salary_regression)
salary_prediction <- function(m, point, minutes, turn_over){
pre_new <- predict(m, data.frame(PPG = point, MPG = minutes, TOPG = turn_over))
msg <- paste("PPG:", point, ",MPG:", minutes, ",TOPG:", turn_over, " ==> Expected Salary: $", format(round(pre_new), big.mark = ","), sep = "")
print(msg)
}
model <- lm(formula = salary17_18 ~ PPG + MPG + TOPG, data = stats_salary_regression)
salary_prediction(model, 16.7, 31.2, 1.5)
View(model)
View(salary.table)
View(ss)
### Hypotheses
**Null Hypothesis (H0):**Mean Age has no impact on salary
$$ H_0: \mu_1 = \mu_1 = \mu_3 $$
**Alternative hypothesis (Ha):** Atleast some difference in Mean Age impact salary
$$ H_A: Some~ \mu~ is \ne  $$
install.packages("rstatix")
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
##Second dataset
player_stats <- read.csv("Seasons_Stats.csv")
#displaying datatypes of variables
#datatypes for dataset 1
str(season_salary)
#datatypes for dataset 2
str(player_stats)
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
##Second dataset
player_stats <- read.csv("Seasons_Stats.csv")
#displaying datatypes of variables
#datatypes for dataset 1
str(season_salary)
#datatypes for dataset 2
str(player_stats)
filtered_2016 <-
player_stats %>% filter(Year == 2016) %>%
select(Year:G, MP, PER, FG:PTS) %>%
distinct(Player, .keep_all = TRUE) %>%
mutate(MPG = MP/G, PPG = PTS/G, APG = AST/G,
RPG = TRB/G, TOPG = TOV/G, BPG = BLK/G,
SPG = STL/G)
View(filtered_2016)
salary_new <- merge(filtered_2016, player_stats, by.x = "Player", by.y = "Player")
names(salary_new)[40] <- "salary16"
salary_new <- salary_new[-39]
View(salary_new)
salary_new <- merge(filtered_2016, player_stats, by.x = "Player", by.y = "Player")
salary_new <- merge(filtered_2016, player_stats, by.x = "Player", by.y = "Player")
View(salary_new)
salary_new <- merge(filtered_2016, player_stats, by.x = "Player", by.y = "Player")
names(salary_new)[40] <- "by_position"
salary_new <- salary_new[-39]
View(salary_new)
corrplot(cor(stats_salary %>%
select(by_position, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "number",type = "upper")
corrplot(cor(stats_salary %>%
select(by_position, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "num",type = "upper")
corrplot(cor(stats_salary %>%
select(by_position, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "pie",type = "upper")
corrplot(cor(stats_salary %>%
select(by_position, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "circle",type = "upper")
corrplot(cor(salary_new %>%
select(by_position, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "circle",type = "upper")
salary_new <- merge(filtered_2016, season_salary, by.x = "Player", by.y = "Player")
names(salary_new)[40] <- "by_position"
salary_new <- salary_new[-39]
salary_new <- merge(filtered_2016, season_salary, by.x = "Player", by.y = "Player")
names(salary_new)[40] <- "filter_sal"
salary_new <- salary_new[-39]
corrplot(cor(salary_new %>%
select(filter_sal, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "circle",type = "upper")
corrplot(cor(salary_new %>%
select(filter_sal, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "number",type = "upper")
corrplot(cor(salary_new %>%
select(filter_sal, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "number",type = "upper")
View(player_stats)
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
##Second dataset
player_stats <- read.csv("Seasons_Stats.csv")
#displaying datatypes of variables
#datatypes for dataset 1
str(season_salary)
#datatypes for dataset 2
str(player_stats)
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
##Second dataset
player_stats <- read.csv("Seasons_Stats.csv")
data(season_salary)
data(player_stats)
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
##Second dataset
player_stats <- read.csv("Seasons_Stats.csv")
season_salary
player_stats
stats_salary_cor <-
stats_salary %>%
select(salary17_18, PPG, MPG, TOPG, RPG, PER, SPG, APG)
corrplot(cor(salary_new %>%
select(filter_sal, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "number",type = "upper")
stats_salary_cor <-
salary_new %>%
select(filter_sal, PPG, MPG, TOPG, RPG, PER, SPG, APG)
ggpairs(stats_salary_cor)
cor(stats_salary_cor)[,"filter_sal"]
stats_salary_cor <-
salary_new %>%
select(filter_sal, PPG, MPG, TOPG, RPG, PER, SPG, APG)
ggpairs(stats_salary_cor)
cor(stats_salary_cor)[,"filter_sal"]
cor_salary_new <-
salary_new %>%
select(filter_sal, PPG, MPG, TOPG, RPG, PER, SPG, APG)
ggpairs(cor_salary_new)
cor(cor_salary_new)[,"filter_sal"]
names(salary_new)[5] <- "Team"
plot_ly(data = salary_new, x = ~filter_sal, y = ~PPG, color = ~Team,
hoverinfo = "text",
text = ~paste("Player: ", Player,
"<br>Salary: ", format(filter_sal, big.mark = ","),"$",
"<br>PPG: ", round(PPG, digits = 3),
"<br>Team: ", Team)) %>%
layout(
title = "Salary vs Point Per Game",
xaxis = list(title = "Salary USD"),
yaxis = list(title = "Point per Game")
)
names(salary_new)[5] <- "Team"
plot_ly(data = salary_new, x = ~filter_sal, y = ~PPG, color = ~Team,
hoverinfo = "text",
text = ~paste("Player: ", Player,
"<br>Salary: ", format(filter_sal, big.mark = ","),"$",
"<br>PPG: ", round(PPG, digits = 3),
"<br>Team: ", Team)) %>%
layout(
title = "Salary vs Point Per Game",
xaxis = list(title = "Player's Salary in USD"),
yaxis = list(title = "Point per Game for Player")
)
names(salary_new)[5] <- "Team"
plot_ly(data = salary_new, x = ~filter_sal, y = ~PPG, color = ~Team,
hoverinfo = "text",
text = ~paste("Player: ", Player,
"<br>Salary: ", format(filter_sal, big.mark = ","),"$",
"<br>PPG: ", round(PPG, digits = 3),
"<br>Team: ", Team)) %>%
layout(
title = "Salary vs Point Per Game",
xaxis = list(title = "Player's Salary in USD"),
yaxis = list(title = "Point per Game for Player")
)
salary_new %>%
ggplot(aes(x = filter_sal, y = PPG)) +
geom_point() +
geom_smooth(method = "lm")
salary_regression <-
salary_new %>% select(filter_sal, MPG:SPG)
lm(filter_sal~., data=salary_regression)
avg.minutes <- mean(salary_regression$MPG)
avg.turnover <- mean(salary_regression$TOPG)
salary_regression$Trusted <- as.factor(ifelse(salary_regression$MPG >= avg.minutes, "Yes", "No"))
salary_regression$Agressiveness <- as.factor(ifelse(salary_regression$TOPG >= avg.turnover, "Yes", "No"))
head(salary_regression)
salary_regression %>%
ggplot(aes(x = filter_sal, y = PPG, colour = Agressiveness)) +
geom_point() +
geom_smooth(method="lm")
lm(formula = filter_sal ~ Trusted * Agressiveness, data=salary_regression)
trust_lm <- lm(formula = filter_sal ~ Trusted * Agressiveness, data=salary_regression)
coef(trust_lm)
trust_lm <- lm(formula = filter_sal ~ Trusted * Agressiveness, data=salary_regression)
summary(trust_lm)
coef(trust_lm)
View(salary_regression)
mean(salary_regression$filter_sal)
trust_lm <- lm(formula = filter_sal ~ Trusted * Agressiveness, data=salary_regression)
summary(trust_lm)
coef(trust_lm)
<center>
![Russel](Russel_pic.PNG){width=50%}
</center>
salary_prediction <- function(m, point, minutes, turn_over){
pre_new <- predict(m, data.frame(PPG = point, MPG = minutes, TOPG = turn_over))
msg <- paste("PPG:", point, ",MPG:", minutes, ",TOPG:", turn_over, " ==> Expected Salary: $", format(round(pre_new), big.mark = ","), sep = "")
print(msg)
}
model <- lm(formula = filter_sal ~ PPG + MPG + TOPG, data = salary_regression)
salary_prediction(model, 31.6, 34.6, 5.4)
salary_prediction <- function(m, point, minutes, turn_over){
pre_new <- predict(m, data.frame(PPG = point, MPG = minutes, TOPG = turn_over))
msg <- paste("PPG:", point, ",MPG:", minutes, ",TOPG:", turn_over, " ==> Expected Salary for player: $", format(round(pre_new), big.mark = ","), sep = "")
print(msg)
}
salary_prediction <- function(m, point, minutes, turn_over){
pre_new <- predict(m, data.frame(PPG = point, MPG = minutes, TOPG = turn_over))
msg <- paste(",PPG:", point, ",MPG:", minutes, ",TOPG:", turn_over, " ==> Expected Salary for player: $", format(round(pre_new), big.mark = ","), sep = "")
print(msg)
}
model <- lm(formula = filter_sal ~ PPG + MPG + TOPG, data = salary_regression)
salary_prediction(model, 31.6, 34.6, 5.4)
salary_prediction <- function(m, point, minutes, turn_over){
pre_new <- predict(m, data.frame(PPG = point, MPG = minutes, TOPG = turn_over))
msg <- paste("PPG:", point, ",MPG:", minutes, ",TOPG:", turn_over, " ==> Expected Salary for player: $", format(round(pre_new), big.mark = ","), sep = "")
print(msg)
}
model <- lm(formula = filter_sal ~ PPG + MPG + TOPG, data = salary_regression)
salary_prediction(model, 31.6, 34.6, 5.4)
# Performing full join using merge function for Joining filtered_2016 dataset and season_salary dataset based on common variable "Player".
# Renaming a column for salary
salary_new <- merge(filtered_2016, season_salary, by.x = "Player", by.y = "Player")
names(salary_new)[40] <- "filter_sal"
#salary_new <- salary_new[-39]
# Performing full join using merge function for Joining filtered_2016 dataset and season_salary dataset based on common variable "Player".
salary_new <- merge(filtered_2016, season_salary, by.x = "Player", by.y = "Player")
# Renaming a column for salary
names(salary_new)[40] <- "filter_sal"
#Deleting unwanted column
salary_new <- salary_new[-39]
summary(salary_regression)
#Fitting a multiple linear regression model by selecting all variables between MPG and SPG.
salary_regression <-
salary_new %>% select(filter_sal, MPG:SPG)
lm(filter_sal~., data=salary_regression)
summary(salary_regression)
#Fitting a multiple linear regression model by selecting all variables between MPG and SPG.
salary_regression <-
salary_new %>% select(filter_sal, MPG:SPG)
lm(filter_sal~., data=salary_regression)
#Fitting a multiple regression model for salary based on Trusted and Agressiveness
trust_lm <- lm(formula = filter_sal ~ Trusted * Agressiveness, data=salary_regression)
#Fitting a multiple regression model for salary based on Trusted and Agressiveness
trust_lm <- lm(formula = filter_sal ~ Trusted * Agressiveness, data=salary_regression)
knitr::opts_chunk$set(echo=TRUE, error=FALSE)
options(dplyr.summarise.inform = FALSE)
#LOADING PACKAGES
library(data.table) #Enhanced dataframe
library(corrplot)   #For plotting correlation plot
library(GGally)     #Alternative Package(An Extension) for ggplot2
library(tidyverse)  #Package that we can use for data analysis
library(PerformanceAnalytics) # Package for Performance, Prediction Analysis
library(plotly) #For improving Graphics on plots
library(rstatix) #Package for performing statistical tests
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
season_salary
##Second dataset
player_stats <- read.csv("Seasons_Stats.csv")
player_stats
#displaying datatypes of variables
#datatypes for dataset 1
str(season_salary)
#datatypes for dataset 2
str(player_stats)
#Filtering dataset for receving datapoints for the year: 2016.
#Selecting relevant variables like Year, G, PER, FG, PTS etc.
#Mutating columns named MPG, RPG, PPG, APG, TOPG, BPG, SPG for further analysis
filtered_2016 <-
player_stats %>% filter(Year == 2016) %>%
select(Year:G, MP, PER, FG:PTS) %>%
distinct(Player, .keep_all = TRUE) %>%
mutate(MPG = MP/G, PPG = PTS/G, APG = AST/G,
RPG = TRB/G, TOPG = TOV/G, BPG = BLK/G,
SPG = STL/G)
filtered_2016
# Performing full join using merge function for Joining filtered_2016 dataset and season_salary dataset based on common variable "Player".
salary_new <- merge(filtered_2016, season_salary, by.x = "Player", by.y = "Player")
# Renaming a column for salary
names(salary_new)[40] <- "filter_sal"
#Deleting unwanted column
salary_new <- salary_new[-39]
salary_new
#Generating correlation plot for salary with other influential variables
#to check whether these variables have correlation.
corrplot(cor(salary_new %>%
select(filter_sal, MPG:SPG,
Age, PER, contains("%")),
use = "complete.obs"),
method = "number",type = "upper")
## Plotting scatterplot matrix for correlation for features with salary variables.
# Made use of ggpairs function.
cor_salary_new <-
salary_new %>%
select(filter_sal, PPG, MPG, TOPG, RPG, PER, SPG, APG)
ggpairs(cor_salary_new)
#Correlation table
cor(cor_salary_new)[,"filter_sal"]
#Generation of Interactive plot for plotting influence of salary received by the player over points scored per game.
#plotly function is used
#hoverinfo argument provides useful technique in generating a plot with dynamic nature. Extremely useful for plotting real-time data.
names(salary_new)[5] <- "Team"
plot_ly(data = salary_new, x = ~filter_sal, y = ~PPG, color = ~Team,
hoverinfo = "text",
text = ~paste("Player: ", Player,
"<br>Salary: ", format(filter_sal, big.mark = ","),"$",
"<br>PPG: ", round(PPG, digits = 3),
"<br>Team: ", Team)) %>%
layout(
title = "Salary vs Point Per Game",
xaxis = list(title = "Player's Salary in USD"),
yaxis = list(title = "Point per Game for Player")
)
#Plotting scatterplot of regression Model for salary variable on Points Scored per Game to see variance in the graph
salary_new %>%
ggplot(aes(x = filter_sal, y = PPG)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x= "Salary", y="PPG")
#Fitting a multiple linear regression model by selecting all variables between MPG and SPG.
salary_regression <-
salary_new %>% select(filter_sal, MPG:SPG)
lm(filter_sal~., data=salary_regression)
#For determining the effect of Trust on Turnovers.
#Obtaining average for MPG feature using mean function
avg.minutes <- mean(salary_regression$MPG)
#Obtaining average for TOPG feature using mean function
avg.turnover <- mean(salary_regression$TOPG)
#Converting categorical variable into factors for Yes and No values
salary_regression$Trusted <- as.factor(ifelse(salary_regression$MPG >= avg.minutes, "Yes", "No"))
#Converting categorical variable into factors for Yes and No values
salary_regression$Agressiveness <- as.factor(ifelse(salary_regression$TOPG >= avg.turnover, "Yes", "No"))
#Printing first 10 rows of the dataset
head(salary_regression)
# Generating regression plot to determine any difference in salary based on Agressiveness
salary_regression %>%
ggplot(aes(x = filter_sal, y = PPG, colour = Agressiveness)) +
geom_point() +
geom_smooth(method="lm")
#Getting average player's salary by finding the mean for all players
mean_salary <- mean(salary_regression$filter_sal)
mean_salary
#Fitting a multiple regression model for salary based on Trusted and Agressiveness
trust_lm <- lm(formula = filter_sal ~ Trusted * Agressiveness, data=salary_regression)
#Plotting summary table for our regression model
summary(trust_lm)
# Coefficients Table
coef(trust_lm)
#Building a prediction function for predicting value based on PPG, MPG, TOPG.
# Printing output value for our function
salary_prediction <- function(m, point, minutes, turn_over){
pre_new <- predict(m, data.frame(PPG = point, MPG = minutes, TOPG = turn_over))
msg <- paste("PPG:", point, ",MPG:", minutes, ",TOPG:", turn_over, " ==> Expected Salary for player: $", format(round(pre_new), big.mark = ","), sep = "")
print(msg)
}
# Fitting values for obtaining output
model <- lm(formula = filter_sal ~ PPG + MPG + TOPG, data = salary_regression)
salary_prediction(model, 31.6, 34.6, 5.4)
View(season_salary)
View(stats_salary_cor)
write.csv(salary_regression,"C:\Users\singh\Desktop\Spring 22\STAT 6020\Shiny App\\salary_regression.csv", row.names = FALSE)
write.csv(salary_regression,"C:/Users/singh/Desktop/salary_regression.csv", row.names = FALSE)
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
season_salary
df <-("salary_regression.csv")
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
season_salary
df <-("salary_regression.csv")
df
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
season_salary
df <-
read.csv("salary_regression.csv")
ggplot(df,
aes(x=PPG)) +
geom_boxplot(fill="Trusted",
outlier.color = "#F56600", outlier.size = 3.0)
ggplot(df,
aes(x=PPG)) +
geom_boxplot(fill="red",
outlier.color = "#F56600", outlier.size = 3.0)
ggplot(df,
aes(x=PPG)) +
geom_boxplot(fill="blue",
outlier.color = "#F56600", outlier.size = 3.0)
ggplot(df,
aes(x=PPG, y= Trusted)) +
geom_boxplot(fill="blue",
outlier.color = "#F56600", outlier.size = 3.0)+
labs
ggplot(df,
aes(x=Trusted, y= PPG)) +
geom_boxplot(fill="blue",
outlier.color = "#F56600", outlier.size = 3.0)+
labs
# Dataset is read
##First dataset
season_salary <-
read.csv("NBA_season1718_salary.csv")
season_salary
df3 <- matrix(NA, nrow(df), ncol(df))
df <- as.matrix(df)
df <-
read.csv("salary_regression.csv")
for(i in 1:nrow(df)){
for(j in 1:ncol(df)){
if(df[ i, j] == "Yes"){
df3[ i, j] = 1
} else {
df3[ i, j] = 0
}
}
}
View(df3)
ggplot(df3,
aes(x=V9)) +
geom_boxplot(fill="blue",
outlier.color = "#F56600", outlier.size = 3.0)+
labs
View(df3)
ggplot(df,
aes(x=PPG)) +
geom_boxplot(fill="blue",
outlier.color = "#F56600", outlier.size = 3.0)+
labs
ggplot(df,
aes(x=PPG)) +
geom_boxplot(fill="blue",
outlier.color = "#F56600", outlier.size = 3.0)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='amoghss', token='063589F77FB07F9740619A64FDB2477D', secret='L9Uo3HU2qpBQ3AuN/a4B9Cn2rgoW2l1R7lyFhM6s')
